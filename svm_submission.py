# -*- coding: utf-8 -*-
"""SVM_SUBMISSION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TnGSUl2Fzg9Q5iDDT3L_sQnV0KNnAHbd
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing Necessary Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df = pd.read_csv('/content/diabetes.csv')
df.head()

df= df.drop("Insulin", axis=1)

zero_class = df[df.Outcome==0]
zero_class.shape

one_class = df[df.Outcome==1]
one_class.shape

plt.xlabel('Glucose')
plt.ylabel('BloodPressure')
plt.scatter(zero_class['Glucose'],zero_class['BloodPressure'], color = 'green', marker='o')
plt.scatter(one_class['Glucose'], one_class['BloodPressure'], color = 'red', marker='*')

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled = scaler.fit(df.drop('Outcome',axis=1)).transform(df.drop('Outcome',axis=1))
df_scaled = pd.DataFrame(scaled, columns=df.columns[:-1])
df_scaled.head()

x = df_scaled
y = df['Outcome']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=0)

from sklearn import svm
from sklearn.metrics import accuracy_score

# USING RBF HARD SVM
hard_margin = svm.SVC(kernel = 'rbf', C = 1e6)
hard_margin.fit(x_train, y_train)
y_pred=hard_margin.predict(x_test)
print('Model accuracy with Hard RBF SVM: '+ format(accuracy_score(y_test, y_pred)))

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm_matrix = pd.DataFrame(data=cm, columns=['Actual Negative:0', 'Actual Positive:1'],
                                 index=['Predict Negative:0', 'Predict Positive:1'])

# Plotting Confusion Matrix
print("Hard SVM with Radial Basis Function Kernal")
sns.heatmap(cm_matrix, annot=True, fmt='d', cmap='mako')

from sklearn.metrics import classification_report
# Classification Report
print(classification_report(y_test,y_pred))

# USING RBF SOFT SVM
soft_margin=svm.SVC(kernel="rbf", C= 1.0)
soft_margin.fit(x_train, y_train)
y_pred=soft_margin.predict(x_test)
print('Model accuracy with soft rbf kernal: '+ format(accuracy_score(y_test, y_pred)))

cm = confusion_matrix(y_test, y_pred)
cm_matrix = pd.DataFrame(data=cm, columns=['Actual Negative:0', 'Actual Positive:1'],
                                 index=['Predict Negative:0', 'Predict Positive:1'])

# Plotting Confusion Matrix
print("Soft SVM with Radial Basis Function Kernal")
sns.heatmap(cm_matrix, annot=True, fmt='d', cmap='mako')

# Classification Report
print(classification_report(y_test,y_pred))

# USING LINEAR SOFT SVM
linear_classifier=svm.SVC(kernel='linear', C=1.0).fit(x_train,y_train)
y_pred = linear_classifier.predict(x_test)
print('Model accuracy with soft linear kernel : '+ format(accuracy_score(y_test, y_pred)))

cm = confusion_matrix(y_test, y_pred)
cm_matrix = pd.DataFrame(data=cm, columns=['Actual Negative:0', 'Actual Positive:1'],
                                 index=['Predict Negative:0', 'Predict Positive:1'])

# Plotting Confusion Matrix
print("Soft SVM with Linear Kernal")
sns.heatmap(cm_matrix, annot=True, fmt='d', cmap='mako')

# Classification Report
print(classification_report(y_test,y_pred))